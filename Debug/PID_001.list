
PID_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004564  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004740  08004740  0000601c  2**0
                  CONTENTS
  4 .ARM          00000008  08004740  08004740  00005740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004748  08004748  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004748  08004748  00005748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800474c  0800474c  0000574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004750  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000001c  0800476c  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800476c  00006144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feac  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d1  00000000  00000000  00015ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000184d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b99  00000000  00000000  000193a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237e6  00000000  00000000  00019f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120f1  00000000  00000000  0003d71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd81b  00000000  00000000  0004f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d02b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  0012d070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00130eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004710 	.word	0x08004710

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08004710 	.word	0x08004710

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <PID_Init>:
 *      Author: burakguzeller
 */

#include "PID.h"

void PID_Init(PID_Typedef_t *pid, float Kp, float Ki, float Kd, float Ts, float outMax, float outMin) {
 80004f4:	b480      	push	{r7}
 80004f6:	b089      	sub	sp, #36	@ 0x24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	61f8      	str	r0, [r7, #28]
 80004fc:	ed87 0a06 	vstr	s0, [r7, #24]
 8000500:	edc7 0a05 	vstr	s1, [r7, #20]
 8000504:	ed87 1a04 	vstr	s2, [r7, #16]
 8000508:	edc7 1a03 	vstr	s3, [r7, #12]
 800050c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000510:	edc7 2a01 	vstr	s5, [r7, #4]
	pid->Kp = Kp;
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	69ba      	ldr	r2, [r7, #24]
 8000518:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	609a      	str	r2, [r3, #8]
	pid->Ts = Ts;
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	60da      	str	r2, [r3, #12]
	pid->lastError = 0;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	f04f 0200 	mov.w	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
	pid->Totalerror = 0;
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	f04f 0200 	mov.w	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
	pid->output = 0;
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	f04f 0200 	mov.w	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
	pid->outputMin = outMin;
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	61da      	str	r2, [r3, #28]
	pid->outputMax = outMax;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	621a      	str	r2, [r3, #32]

}
 8000550:	bf00      	nop
 8000552:	3724      	adds	r7, #36	@ 0x24
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <PID_Control>:
	pid->Kp = Kp;
	pid->Ki = Ki;
	pid->Kd = Kd;
}

void PID_Control(PID_Typedef_t *pid, float setValue, float measuredValue) {
 800055c:	b480      	push	{r7}
 800055e:	b089      	sub	sp, #36	@ 0x24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	ed87 0a02 	vstr	s0, [r7, #8]
 8000568:	edc7 0a01 	vstr	s1, [r7, #4]
	if (pid->Ts <= 0) {
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800057a:	f240 808b 	bls.w	8000694 <PID_Control+0x138>
	    return;
	}

	float error = setValue - measuredValue; // cikan hata
 800057e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000582:	edd7 7a01 	vldr	s15, [r7, #4]
 8000586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800058a:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->Totalerror += error * pid->Ts;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	ed93 7a04 	vldr	s14, [r3, #16]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	edd3 6a03 	vldr	s13, [r3, #12]
 800059a:	edd7 7a07 	vldr	s15, [r7, #28]
 800059e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	edc3 7a04 	vstr	s15, [r3, #16]

	// proportian calculate
	float P = pid->Kp * error;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	edd3 7a00 	vldr	s15, [r3]
 80005b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80005b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005ba:	edc7 7a06 	vstr	s15, [r7, #24]

	// Integral calculate
	float I = pid->Ki * pid->Totalerror;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80005ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005ce:	edc7 7a05 	vstr	s15, [r7, #20]

	// Derivative calculate
    float D = pid->Kd * (error - pid->lastError) / pid->Ts;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	edd3 7a05 	vldr	s15, [r3, #20]
 80005de:	edd7 6a07 	vldr	s13, [r7, #28]
 80005e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80005e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80005f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005f4:	edc7 7a04 	vstr	s15, [r7, #16]

    pid->output = P + I + D;
 80005f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80005fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000604:	edd7 7a04 	vldr	s15, [r7, #16]
 8000608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->lastError = error;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	69fa      	ldr	r2, [r7, #28]
 8000616:	615a      	str	r2, [r3, #20]

	if(pid->output < pid->outputMin) {
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	ed93 7a06 	vldr	s14, [r3, #24]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	edd3 7a07 	vldr	s15, [r3, #28]
 8000624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062c:	d513      	bpl.n	8000656 <PID_Control+0xfa>
	    pid->output = pid->outputMin;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	69da      	ldr	r2, [r3, #28]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	619a      	str	r2, [r3, #24]
	    pid->Totalerror -= error * pid->Ts; // Integral birikmesini önlemek için geri al.
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	ed93 7a04 	vldr	s14, [r3, #16]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000642:	edd7 7a07 	vldr	s15, [r7, #28]
 8000646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800064a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	edc3 7a04 	vstr	s15, [r3, #16]
 8000654:	e01f      	b.n	8000696 <PID_Control+0x13a>
	}
	else if (pid->output > pid->outputMax) {
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	ed93 7a06 	vldr	s14, [r3, #24]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000662:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066a:	dd14      	ble.n	8000696 <PID_Control+0x13a>
	    pid->output = pid->outputMax;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	6a1a      	ldr	r2, [r3, #32]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	619a      	str	r2, [r3, #24]
	    pid->Totalerror -= error * pid->Ts; // Integral birikmesini önlemek için geri al.
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	ed93 7a04 	vldr	s14, [r3, #16]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	edd3 6a03 	vldr	s13, [r3, #12]
 8000680:	edd7 7a07 	vldr	s15, [r7, #28]
 8000684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	edc3 7a04 	vstr	s15, [r3, #16]
 8000692:	e000      	b.n	8000696 <PID_Control+0x13a>
	    return;
 8000694:	bf00      	nop
	}
}
 8000696:	3724      	adds	r7, #36	@ 0x24
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <PID_Output>:

float PID_Output(PID_Typedef_t *pid) {
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	return pid->output;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	ee07 3a90 	vmov	s15, r3
}
 80006b0:	eeb0 0a67 	vmov.f32	s0, s15
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <map>:
float ts = 0.001;

uint32_t adcValue = 0;


long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80006be:	b480      	push	{r7}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
 80006ca:	603b      	str	r3, [r7, #0]
      return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	69b9      	ldr	r1, [r7, #24]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	1a8a      	subs	r2, r1, r2
 80006d8:	fb03 f202 	mul.w	r2, r3, r2
 80006dc:	6879      	ldr	r1, [r7, #4]
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	1acb      	subs	r3, r1, r3
 80006e2:	fb92 f2f3 	sdiv	r2, r2, r3
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	4413      	add	r3, r2
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <HAL_ADC_ConvCpltCallback>:

uint8_t pwmValue = 0;
uint32_t pidOut = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a1d      	ldr	r2, [pc, #116]	@ (800077c <HAL_ADC_ConvCpltCallback+0x84>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d134      	bne.n	8000774 <HAL_ADC_ConvCpltCallback+0x7c>
	  adcValue = HAL_ADC_GetValue(&hadc1);
 800070a:	481d      	ldr	r0, [pc, #116]	@ (8000780 <HAL_ADC_ConvCpltCallback+0x88>)
 800070c:	f000 fe5a 	bl	80013c4 <HAL_ADC_GetValue>
 8000710:	4603      	mov	r3, r0
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000714:	6013      	str	r3, [r2, #0]
	  pwmValue = map(adcValue, 0, 4095, 0, 100);
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	2364      	movs	r3, #100	@ 0x64
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2300      	movs	r3, #0
 8000722:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000726:	2100      	movs	r1, #0
 8000728:	f7ff ffc9 	bl	80006be <map>
 800072c:	4603      	mov	r3, r0
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <HAL_ADC_ConvCpltCallback+0x90>)
 8000732:	701a      	strb	r2, [r3, #0]
	  PID_Control(&PID, 80, pwmValue);
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <HAL_ADC_ConvCpltCallback+0x90>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	ee07 3a90 	vmov	s15, r3
 800073c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000740:	eef0 0a67 	vmov.f32	s1, s15
 8000744:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800078c <HAL_ADC_ConvCpltCallback+0x94>
 8000748:	4811      	ldr	r0, [pc, #68]	@ (8000790 <HAL_ADC_ConvCpltCallback+0x98>)
 800074a:	f7ff ff07 	bl	800055c <PID_Control>
	  pidOut = PID_Output(&PID);
 800074e:	4810      	ldr	r0, [pc, #64]	@ (8000790 <HAL_ADC_ConvCpltCallback+0x98>)
 8000750:	f7ff ffa6 	bl	80006a0 <PID_Output>
 8000754:	eef0 7a40 	vmov.f32	s15, s0
 8000758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800075c:	ee17 2a90 	vmov	r2, s15
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000762:	601a      	str	r2, [r3, #0]
	  TIM2->CCR1 = pidOut;
 8000764:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_ADC_ConvCpltCallback+0x9c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6353      	str	r3, [r2, #52]	@ 0x34
	  HAL_ADC_Start_IT(&hadc1);
 800076e:	4804      	ldr	r0, [pc, #16]	@ (8000780 <HAL_ADC_ConvCpltCallback+0x88>)
 8000770:	f000 fc3a 	bl	8000fe8 <HAL_ADC_Start_IT>
  }
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40012000 	.word	0x40012000
 8000780:	20000038 	.word	0x20000038
 8000784:	20000134 	.word	0x20000134
 8000788:	20000138 	.word	0x20000138
 800078c:	42a00000 	.word	0x42a00000
 8000790:	20000110 	.word	0x20000110
 8000794:	2000013c 	.word	0x2000013c

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079c:	f000 fb6e 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f83e 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a4:	f000 f9a0 	bl	8000ae8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 f974 	bl	8000a94 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80007ac:	f000 f8fc 	bl	80009a8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80007b0:	f000 f8a8 	bl	8000904 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  PID_Init(&PID, kp, ki, kd, ts, 70, 50);
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <main+0x64>)
 80007b6:	edd3 7a00 	vldr	s15, [r3]
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <main+0x68>)
 80007bc:	ed93 7a00 	vldr	s14, [r3]
 80007c0:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <main+0x6c>)
 80007c2:	edd3 6a00 	vldr	s13, [r3]
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <main+0x70>)
 80007c8:	ed93 6a00 	vldr	s12, [r3]
 80007cc:	eddf 2a0f 	vldr	s5, [pc, #60]	@ 800080c <main+0x74>
 80007d0:	ed9f 2a0f 	vldr	s4, [pc, #60]	@ 8000810 <main+0x78>
 80007d4:	eef0 1a46 	vmov.f32	s3, s12
 80007d8:	eeb0 1a66 	vmov.f32	s2, s13
 80007dc:	eef0 0a47 	vmov.f32	s1, s14
 80007e0:	eeb0 0a67 	vmov.f32	s0, s15
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <main+0x7c>)
 80007e6:	f7ff fe85 	bl	80004f4 <PID_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007ea:	2100      	movs	r1, #0
 80007ec:	480a      	ldr	r0, [pc, #40]	@ (8000818 <main+0x80>)
 80007ee:	f002 fa5b 	bl	8002ca8 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 80007f2:	480a      	ldr	r0, [pc, #40]	@ (800081c <main+0x84>)
 80007f4:	f000 fbf8 	bl	8000fe8 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <main+0x60>
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000004 	.word	0x20000004
 8000804:	20000008 	.word	0x20000008
 8000808:	2000000c 	.word	0x2000000c
 800080c:	42480000 	.word	0x42480000
 8000810:	428c0000 	.word	0x428c0000
 8000814:	20000110 	.word	0x20000110
 8000818:	20000080 	.word	0x20000080
 800081c:	20000038 	.word	0x20000038

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	@ 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2234      	movs	r2, #52	@ 0x34
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 ff42 	bl	80046b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b2c      	ldr	r3, [pc, #176]	@ (80008fc <SystemClock_Config+0xdc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	4a2b      	ldr	r2, [pc, #172]	@ (80008fc <SystemClock_Config+0xdc>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	@ 0x40
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <SystemClock_Config+0xdc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <SystemClock_Config+0xe0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a25      	ldr	r2, [pc, #148]	@ (8000900 <SystemClock_Config+0xe0>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b23      	ldr	r3, [pc, #140]	@ (8000900 <SystemClock_Config+0xe0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000884:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000894:	23b4      	movs	r3, #180	@ 0xb4
 8000896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 feb7 	bl	800261c <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008b4:	f000 f940 	bl	8000b38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b8:	f001 fb16 	bl	8001ee8 <HAL_PWREx_EnableOverDrive>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008c2:	f000 f939 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2302      	movs	r3, #2
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2105      	movs	r1, #5
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fb4f 	bl	8001f88 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008f0:	f000 f922 	bl	8000b38 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	@ 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <MX_ADC1_Init+0x98>)
 8000918:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <MX_ADC1_Init+0x9c>)
 800091a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800091c:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <MX_ADC1_Init+0x98>)
 800091e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000922:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000924:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <MX_ADC1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_ADC1_Init+0x98>)
 800092c:	2201      	movs	r2, #1
 800092e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000930:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_ADC1_Init+0x98>)
 8000932:	2201      	movs	r2, #1
 8000934:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <MX_ADC1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_ADC1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_ADC1_Init+0x98>)
 8000946:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <MX_ADC1_Init+0xa0>)
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_ADC1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_ADC1_Init+0x98>)
 8000952:	2201      	movs	r2, #1
 8000954:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_ADC1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_ADC1_Init+0x98>)
 8000960:	2201      	movs	r2, #1
 8000962:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000964:	480d      	ldr	r0, [pc, #52]	@ (800099c <MX_ADC1_Init+0x98>)
 8000966:	f000 fafb 	bl	8000f60 <HAL_ADC_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000970:	f000 f8e2 	bl	8000b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000974:	2301      	movs	r3, #1
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_ADC1_Init+0x98>)
 8000986:	f000 fd3f 	bl	8001408 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000990:	f000 f8d2 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000038 	.word	0x20000038
 80009a0:	40012000 	.word	0x40012000
 80009a4:	0f000001 	.word	0x0f000001

080009a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	@ 0x38
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
 80009d4:	615a      	str	r2, [r3, #20]
 80009d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 80009da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 80009e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 80009e2:	f242 3227 	movw	r2, #8999	@ 0x2327
 80009e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80009ee:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 80009f0:	2263      	movs	r2, #99	@ 0x63
 80009f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a00:	4823      	ldr	r0, [pc, #140]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 8000a02:	f002 f8a9 	bl	8002b58 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a0c:	f000 f894 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	481c      	ldr	r0, [pc, #112]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 8000a1e:	f002 facd 	bl	8002fbc <HAL_TIM_ConfigClockSource>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a28:	f000 f886 	bl	8000b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a2c:	4818      	ldr	r0, [pc, #96]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 8000a2e:	f002 f8e2 	bl	8002bf6 <HAL_TIM_PWM_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a38:	f000 f87e 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 8000a4c:	f002 fe9a 	bl	8003784 <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a56:	f000 f86f 	bl	8000b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5a:	2360      	movs	r3, #96	@ 0x60
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 8000a72:	f002 f9e1 	bl	8002e38 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a7c:	f000 f85c 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <MX_TIM2_Init+0xe8>)
 8000a82:	f000 f8f3 	bl	8000c6c <HAL_TIM_MspPostInit>

}
 8000a86:	bf00      	nop
 8000a88:	3738      	adds	r7, #56	@ 0x38
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000080 	.word	0x20000080

08000a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <MX_USART1_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_USART1_UART_Init+0x4c>)
 8000acc:	f002 fed6 	bl	800387c <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f82f 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000c8 	.word	0x200000c8
 8000ae4:	40011000 	.word	0x40011000

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <MX_GPIO_Init+0x4c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <MX_GPIO_Init+0x4c>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <MX_GPIO_Init+0x4c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_GPIO_Init+0x4c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <MX_GPIO_Init+0x4c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_GPIO_Init+0x4c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <Error_Handler+0x8>

08000b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c20 <HAL_ADC_MspInit+0x8c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12f      	bne.n	8000c16 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <HAL_ADC_MspInit+0x90>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <HAL_ADC_MspInit+0x90>)
 8000bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <HAL_ADC_MspInit+0x90>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <HAL_ADC_MspInit+0x90>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <HAL_ADC_MspInit+0x90>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <HAL_ADC_MspInit+0x90>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4809      	ldr	r0, [pc, #36]	@ (8000c28 <HAL_ADC_MspInit+0x94>)
 8000c02:	f000 ffdd 	bl	8001bc0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2012      	movs	r0, #18
 8000c0c:	f000 ff0f 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c10:	2012      	movs	r0, #18
 8000c12:	f000 ff28 	bl	8001a66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	@ 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40012000 	.word	0x40012000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000

08000c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c3c:	d10d      	bne.n	8000c5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <HAL_TIM_Base_MspInit+0x3c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <HAL_TIM_Base_MspInit+0x3c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_TIM_Base_MspInit+0x3c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c8c:	d11d      	bne.n	8000cca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <HAL_TIM_MspPostInit+0x68>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <HAL_TIM_MspPostInit+0x68>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <HAL_TIM_MspPostInit+0x68>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000caa:	2320      	movs	r3, #32
 8000cac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <HAL_TIM_MspPostInit+0x6c>)
 8000cc6:	f000 ff7b 	bl	8001bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d70 <HAL_UART_MspInit+0x94>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d134      	bne.n	8000d68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_UART_MspInit+0x98>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <HAL_UART_MspInit+0x98>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_UART_MspInit+0x98>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <HAL_UART_MspInit+0x98>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <HAL_UART_MspInit+0x98>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_UART_MspInit+0x98>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4809      	ldr	r0, [pc, #36]	@ (8000d78 <HAL_UART_MspInit+0x9c>)
 8000d54:	f000 ff34 	bl	8001bc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2025      	movs	r0, #37	@ 0x25
 8000d5e:	f000 fe66 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d62:	2025      	movs	r0, #37	@ 0x25
 8000d64:	f000 fe7f 	bl	8001a66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	@ 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40011000 	.word	0x40011000
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 f8a5 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <ADC_IRQHandler+0x10>)
 8000de2:	f000 f9df 	bl	80011a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000038 	.word	0x20000038

08000df0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <USART1_IRQHandler+0x10>)
 8000df6:	f002 fd91 	bl	800391c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000c8 	.word	0x200000c8

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <SystemInit+0x20>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <SystemInit+0x20>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e2c:	f7ff ffea 	bl	8000e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f003 fc37 	bl	80046c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fc9d 	bl	8000798 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e6c:	08004750 	.word	0x08004750
  ldr r2, =_sbss
 8000e70:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e74:	20000144 	.word	0x20000144

08000e78 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <CAN1_RX0_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 fdb7 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fe48 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fdcf 	bl	8001a82 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000efc:	f000 fd97 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	@ (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000010 	.word	0x20000010
 8000f18:	20000018 	.word	0x20000018
 8000f1c:	20000014 	.word	0x20000014

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000018 	.word	0x20000018
 8000f44:	20000140 	.word	0x20000140

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000140 	.word	0x20000140

08000f60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e033      	b.n	8000fde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d109      	bne.n	8000f92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fe08 	bl	8000b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d118      	bne.n	8000fd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fa6:	f023 0302 	bic.w	r3, r3, #2
 8000faa:	f043 0202 	orr.w	r2, r3, #2
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fb5a 	bl	800166c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f023 0303 	bic.w	r3, r3, #3
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fce:	e001      	b.n	8000fd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_ADC_Start_IT+0x1a>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e0bd      	b.n	800117e <HAL_ADC_Start_IT+0x196>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d018      	beq.n	800104a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001028:	4b58      	ldr	r3, [pc, #352]	@ (800118c <HAL_ADC_Start_IT+0x1a4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a58      	ldr	r2, [pc, #352]	@ (8001190 <HAL_ADC_Start_IT+0x1a8>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0c9a      	lsrs	r2, r3, #18
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800103c:	e002      	b.n	8001044 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	3b01      	subs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f9      	bne.n	800103e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b01      	cmp	r3, #1
 8001056:	f040 8085 	bne.w	8001164 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001084:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001098:	d106      	bne.n	80010a8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	f023 0206 	bic.w	r2, r3, #6
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80010a6:	e002      	b.n	80010ae <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010b6:	4b37      	ldr	r3, [pc, #220]	@ (8001194 <HAL_ADC_Start_IT+0x1ac>)
 80010b8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010c2:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010d2:	f043 0320 	orr.w	r3, r3, #32
 80010d6:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d12a      	bne.n	800113a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001198 <HAL_ADC_Start_IT+0x1b0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d015      	beq.n	800111a <HAL_ADC_Start_IT+0x132>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a2a      	ldr	r2, [pc, #168]	@ (800119c <HAL_ADC_Start_IT+0x1b4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d105      	bne.n	8001104 <HAL_ADC_Start_IT+0x11c>
 80010f8:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <HAL_ADC_Start_IT+0x1ac>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 031f 	and.w	r3, r3, #31
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00a      	beq.n	800111a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a25      	ldr	r2, [pc, #148]	@ (80011a0 <HAL_ADC_Start_IT+0x1b8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d136      	bne.n	800117c <HAL_ADC_Start_IT+0x194>
 800110e:	4b21      	ldr	r3, [pc, #132]	@ (8001194 <HAL_ADC_Start_IT+0x1ac>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	d130      	bne.n	800117c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d129      	bne.n	800117c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	e020      	b.n	800117c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <HAL_ADC_Start_IT+0x1b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d11b      	bne.n	800117c <HAL_ADC_Start_IT+0x194>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d114      	bne.n	800117c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	e00b      	b.n	800117c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	f043 0210 	orr.w	r2, r3, #16
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000010 	.word	0x20000010
 8001190:	431bde83 	.word	0x431bde83
 8001194:	40012300 	.word	0x40012300
 8001198:	40012000 	.word	0x40012000
 800119c:	40012100 	.word	0x40012100
 80011a0:	40012200 	.word	0x40012200

080011a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d049      	beq.n	800126e <HAL_ADC_IRQHandler+0xca>
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d046      	beq.n	800126e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d105      	bne.n	80011f8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d12b      	bne.n	800125e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800120a:	2b00      	cmp	r3, #0
 800120c:	d127      	bne.n	800125e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001214:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001226:	2b00      	cmp	r3, #0
 8001228:	d119      	bne.n	800125e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0220 	bic.w	r2, r2, #32
 8001238:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d105      	bne.n	800125e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f043 0201 	orr.w	r2, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fa4a 	bl	80006f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f06f 0212 	mvn.w	r2, #18
 800126c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d057      	beq.n	8001334 <HAL_ADC_IRQHandler+0x190>
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d054      	beq.n	8001334 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d105      	bne.n	80012a2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d139      	bne.n	8001324 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012b6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d12b      	bne.n	8001324 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d124      	bne.n	8001324 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d11d      	bne.n	8001324 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d119      	bne.n	8001324 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012fe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d105      	bne.n	8001324 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fa9d 	bl	8001864 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f06f 020c 	mvn.w	r2, #12
 8001332:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001342:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d017      	beq.n	800137a <HAL_ADC_IRQHandler+0x1d6>
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d014      	beq.n	800137a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b01      	cmp	r3, #1
 800135c:	d10d      	bne.n	800137a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f837 	bl	80013de <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f06f 0201 	mvn.w	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001388:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d015      	beq.n	80013bc <HAL_ADC_IRQHandler+0x218>
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d012      	beq.n	80013bc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	f043 0202 	orr.w	r2, r3, #2
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f06f 0220 	mvn.w	r2, #32
 80013aa:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f820 	bl	80013f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f06f 0220 	mvn.w	r2, #32
 80013ba:	601a      	str	r2, [r3, #0]
  }
}
 80013bc:	bf00      	nop
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1c>
 8001420:	2302      	movs	r3, #2
 8001422:	e113      	b.n	800164c <HAL_ADC_ConfigChannel+0x244>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d925      	bls.n	8001480 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68d9      	ldr	r1, [r3, #12]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	3b1e      	subs	r3, #30
 800144a:	2207      	movs	r2, #7
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68d9      	ldr	r1, [r3, #12]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	4603      	mov	r3, r0
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4403      	add	r3, r0
 8001472:	3b1e      	subs	r3, #30
 8001474:	409a      	lsls	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	e022      	b.n	80014c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6919      	ldr	r1, [r3, #16]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	2207      	movs	r2, #7
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	400a      	ands	r2, r1
 80014a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4403      	add	r3, r0
 80014bc:	409a      	lsls	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d824      	bhi.n	8001518 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b05      	subs	r3, #5
 80014e0:	221f      	movs	r2, #31
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	400a      	ands	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	3b05      	subs	r3, #5
 800150a:	fa00 f203 	lsl.w	r2, r0, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	635a      	str	r2, [r3, #52]	@ 0x34
 8001516:	e04c      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d824      	bhi.n	800156a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	3b23      	subs	r3, #35	@ 0x23
 8001532:	221f      	movs	r2, #31
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43da      	mvns	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	400a      	ands	r2, r1
 8001540:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b23      	subs	r3, #35	@ 0x23
 800155c:	fa00 f203 	lsl.w	r2, r0, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	631a      	str	r2, [r3, #48]	@ 0x30
 8001568:	e023      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b41      	subs	r3, #65	@ 0x41
 800157c:	221f      	movs	r2, #31
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3b41      	subs	r3, #65	@ 0x41
 80015a6:	fa00 f203 	lsl.w	r2, r0, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <HAL_ADC_ConfigChannel+0x250>)
 80015b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a28      	ldr	r2, [pc, #160]	@ (800165c <HAL_ADC_ConfigChannel+0x254>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10f      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1d8>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b12      	cmp	r3, #18
 80015c6:	d10b      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <HAL_ADC_ConfigChannel+0x254>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12b      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <HAL_ADC_ConfigChannel+0x258>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d003      	beq.n	80015fc <HAL_ADC_ConfigChannel+0x1f4>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b11      	cmp	r3, #17
 80015fa:	d122      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a11      	ldr	r2, [pc, #68]	@ (8001660 <HAL_ADC_ConfigChannel+0x258>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d111      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161e:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <HAL_ADC_ConfigChannel+0x25c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <HAL_ADC_ConfigChannel+0x260>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	0c9a      	lsrs	r2, r3, #18
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001634:	e002      	b.n	800163c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3b01      	subs	r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40012300 	.word	0x40012300
 800165c:	40012000 	.word	0x40012000
 8001660:	10000012 	.word	0x10000012
 8001664:	20000010 	.word	0x20000010
 8001668:	431bde83 	.word	0x431bde83

0800166c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001674:	4b79      	ldr	r3, [pc, #484]	@ (800185c <ADC_Init+0x1f0>)
 8001676:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	431a      	orrs	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	021a      	lsls	r2, r3, #8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6899      	ldr	r1, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fe:	4a58      	ldr	r2, [pc, #352]	@ (8001860 <ADC_Init+0x1f4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d022      	beq.n	800174a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001712:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6899      	ldr	r1, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	e00f      	b.n	800176a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001768:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0202 	bic.w	r2, r2, #2
 8001778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7e1b      	ldrb	r3, [r3, #24]
 8001784:	005a      	lsls	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01b      	beq.n	80017d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6859      	ldr	r1, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c2:	3b01      	subs	r3, #1
 80017c4:	035a      	lsls	r2, r3, #13
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	e007      	b.n	80017e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	051a      	lsls	r2, r3, #20
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6899      	ldr	r1, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001822:	025a      	lsls	r2, r3, #9
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800183a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6899      	ldr	r1, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	029a      	lsls	r2, r3, #10
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	609a      	str	r2, [r3, #8]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40012300 	.word	0x40012300
 8001860:	0f000001 	.word	0x0f000001

08001864 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	@ (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	@ (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	@ (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	@ 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff29 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff3e 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff8e 	bl	800196c <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5d 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff31 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa2 	bl	80019d4 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fa4e 	bl	8000f48 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d008      	beq.n	8001acc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2280      	movs	r2, #128	@ 0x80
 8001abe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e052      	b.n	8001b72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0216 	bic.w	r2, r2, #22
 8001ada:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001aea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <HAL_DMA_Abort+0x62>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0208 	bic.w	r2, r2, #8
 8001b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1c:	e013      	b.n	8001b46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b1e:	f7ff fa13 	bl	8000f48 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d90c      	bls.n	8001b46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2203      	movs	r2, #3
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e015      	b.n	8001b72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e4      	bne.n	8001b1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	223f      	movs	r2, #63	@ 0x3f
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d004      	beq.n	8001b98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e00c      	b.n	8001bb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2205      	movs	r2, #5
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e165      	b.n	8001ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 8154 	bne.w	8001ea2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d005      	beq.n	8001c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d130      	bne.n	8001c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 0201 	and.w	r2, r3, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d017      	beq.n	8001cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d123      	bne.n	8001d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	69b9      	ldr	r1, [r7, #24]
 8001d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80ae 	beq.w	8001ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec0 <HAL_GPIO_Init+0x300>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec0 <HAL_GPIO_Init+0x300>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d56:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec0 <HAL_GPIO_Init+0x300>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d62:	4a58      	ldr	r2, [pc, #352]	@ (8001ec4 <HAL_GPIO_Init+0x304>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4f      	ldr	r2, [pc, #316]	@ (8001ec8 <HAL_GPIO_Init+0x308>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d025      	beq.n	8001dda <HAL_GPIO_Init+0x21a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4e      	ldr	r2, [pc, #312]	@ (8001ecc <HAL_GPIO_Init+0x30c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01f      	beq.n	8001dd6 <HAL_GPIO_Init+0x216>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed0 <HAL_GPIO_Init+0x310>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d019      	beq.n	8001dd2 <HAL_GPIO_Init+0x212>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ed4 <HAL_GPIO_Init+0x314>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_GPIO_Init+0x20e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed8 <HAL_GPIO_Init+0x318>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00d      	beq.n	8001dca <HAL_GPIO_Init+0x20a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4a      	ldr	r2, [pc, #296]	@ (8001edc <HAL_GPIO_Init+0x31c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d007      	beq.n	8001dc6 <HAL_GPIO_Init+0x206>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a49      	ldr	r2, [pc, #292]	@ (8001ee0 <HAL_GPIO_Init+0x320>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_GPIO_Init+0x202>
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	e00c      	b.n	8001ddc <HAL_GPIO_Init+0x21c>
 8001dc2:	2307      	movs	r3, #7
 8001dc4:	e00a      	b.n	8001ddc <HAL_GPIO_Init+0x21c>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e008      	b.n	8001ddc <HAL_GPIO_Init+0x21c>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x21c>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x21c>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x21c>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x21c>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f002 0203 	and.w	r2, r2, #3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dec:	4935      	ldr	r1, [pc, #212]	@ (8001ec4 <HAL_GPIO_Init+0x304>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee4 <HAL_GPIO_Init+0x324>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a31      	ldr	r2, [pc, #196]	@ (8001ee4 <HAL_GPIO_Init+0x324>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee4 <HAL_GPIO_Init+0x324>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a26      	ldr	r2, [pc, #152]	@ (8001ee4 <HAL_GPIO_Init+0x324>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <HAL_GPIO_Init+0x324>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee4 <HAL_GPIO_Init+0x324>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_GPIO_Init+0x324>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ee4 <HAL_GPIO_Init+0x324>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f67f ae96 	bls.w	8001bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40021400 	.word	0x40021400
 8001ee0:	40021800 	.word	0x40021800
 8001ee4:	40013c00 	.word	0x40013c00

08001ee8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_PWREx_EnableOverDrive+0x90>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <HAL_PWREx_EnableOverDrive+0x94>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f14:	f7ff f818 	bl	8000f48 <HAL_GetTick>
 8001f18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f1a:	e009      	b.n	8001f30 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f1c:	f7ff f814 	bl	8000f48 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f2a:	d901      	bls.n	8001f30 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e01f      	b.n	8001f70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f3c:	d1ee      	bne.n	8001f1c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f3e:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f44:	f7ff f800 	bl	8000f48 <HAL_GetTick>
 8001f48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f4a:	e009      	b.n	8001f60 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f4c:	f7fe fffc 	bl	8000f48 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f5a:	d901      	bls.n	8001f60 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e007      	b.n	8001f70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f60:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f6c:	d1ee      	bne.n	8001f4c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	420e0040 	.word	0x420e0040
 8001f80:	40007000 	.word	0x40007000
 8001f84:	420e0044 	.word	0x420e0044

08001f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0cc      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b68      	ldr	r3, [pc, #416]	@ (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d90c      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b65      	ldr	r3, [pc, #404]	@ (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b63      	ldr	r3, [pc, #396]	@ (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff4:	4b53      	ldr	r3, [pc, #332]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b50      	ldr	r3, [pc, #320]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	494d      	ldr	r1, [pc, #308]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d044      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b47      	ldr	r3, [pc, #284]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d119      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d003      	beq.n	8002046 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002042:	2b03      	cmp	r3, #3
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b3f      	ldr	r3, [pc, #252]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e06f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e067      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b37      	ldr	r3, [pc, #220]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4934      	ldr	r1, [pc, #208]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7fe ff66 	bl	8000f48 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7fe ff62 	bl	8000f48 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e04f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d20c      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b22      	ldr	r3, [pc, #136]	@ (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4916      	ldr	r1, [pc, #88]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	490e      	ldr	r1, [pc, #56]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210e:	f000 f855 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	490a      	ldr	r1, [pc, #40]	@ (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	@ (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fec6 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00
 8002144:	40023800 	.word	0x40023800
 8002148:	08004728 	.word	0x08004728
 800214c:	20000010 	.word	0x20000010
 8002150:	20000014 	.word	0x20000014

08002154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <HAL_RCC_GetHCLKFreq+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000010 	.word	0x20000010

0800216c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002170:	f7ff fff0 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b05      	ldr	r3, [pc, #20]	@ (800218c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0a9b      	lsrs	r3, r3, #10
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4903      	ldr	r1, [pc, #12]	@ (8002190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	08004738 	.word	0x08004738

08002194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002198:	f7ff ffdc 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	0b5b      	lsrs	r3, r3, #13
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	4903      	ldr	r1, [pc, #12]	@ (80021b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	08004738 	.word	0x08004738

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c0:	b0ae      	sub	sp, #184	@ 0xb8
 80021c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021e2:	4bcb      	ldr	r3, [pc, #812]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x354>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	f200 8206 	bhi.w	80025fc <HAL_RCC_GetSysClockFreq+0x440>
 80021f0:	a201      	add	r2, pc, #4	@ (adr r2, 80021f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	080025fd 	.word	0x080025fd
 8002200:	080025fd 	.word	0x080025fd
 8002204:	080025fd 	.word	0x080025fd
 8002208:	08002235 	.word	0x08002235
 800220c:	080025fd 	.word	0x080025fd
 8002210:	080025fd 	.word	0x080025fd
 8002214:	080025fd 	.word	0x080025fd
 8002218:	0800223d 	.word	0x0800223d
 800221c:	080025fd 	.word	0x080025fd
 8002220:	080025fd 	.word	0x080025fd
 8002224:	080025fd 	.word	0x080025fd
 8002228:	0800242d 	.word	0x0800242d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4bb9      	ldr	r3, [pc, #740]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 800222e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002232:	e1e7      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002234:	4bb8      	ldr	r3, [pc, #736]	@ (8002518 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002236:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800223a:	e1e3      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800223c:	4bb4      	ldr	r3, [pc, #720]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x354>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002248:	4bb1      	ldr	r3, [pc, #708]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x354>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d071      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002254:	4bae      	ldr	r3, [pc, #696]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x354>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	099b      	lsrs	r3, r3, #6
 800225a:	2200      	movs	r2, #0
 800225c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002260:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800227a:	4622      	mov	r2, r4
 800227c:	462b      	mov	r3, r5
 800227e:	f04f 0000 	mov.w	r0, #0
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	0159      	lsls	r1, r3, #5
 8002288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228c:	0150      	lsls	r0, r2, #5
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4621      	mov	r1, r4
 8002294:	1a51      	subs	r1, r2, r1
 8002296:	6439      	str	r1, [r7, #64]	@ 0x40
 8002298:	4629      	mov	r1, r5
 800229a:	eb63 0301 	sbc.w	r3, r3, r1
 800229e:	647b      	str	r3, [r7, #68]	@ 0x44
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80022ac:	4649      	mov	r1, r9
 80022ae:	018b      	lsls	r3, r1, #6
 80022b0:	4641      	mov	r1, r8
 80022b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022b6:	4641      	mov	r1, r8
 80022b8:	018a      	lsls	r2, r1, #6
 80022ba:	4641      	mov	r1, r8
 80022bc:	1a51      	subs	r1, r2, r1
 80022be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022c0:	4649      	mov	r1, r9
 80022c2:	eb63 0301 	sbc.w	r3, r3, r1
 80022c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80022d4:	4649      	mov	r1, r9
 80022d6:	00cb      	lsls	r3, r1, #3
 80022d8:	4641      	mov	r1, r8
 80022da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022de:	4641      	mov	r1, r8
 80022e0:	00ca      	lsls	r2, r1, #3
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	4622      	mov	r2, r4
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80022ee:	462b      	mov	r3, r5
 80022f0:	460a      	mov	r2, r1
 80022f2:	eb42 0303 	adc.w	r3, r2, r3
 80022f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002304:	4629      	mov	r1, r5
 8002306:	024b      	lsls	r3, r1, #9
 8002308:	4621      	mov	r1, r4
 800230a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800230e:	4621      	mov	r1, r4
 8002310:	024a      	lsls	r2, r1, #9
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800231a:	2200      	movs	r2, #0
 800231c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002320:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002324:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002328:	f7fd ff6c 	bl	8000204 <__aeabi_uldivmod>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4613      	mov	r3, r2
 8002332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002336:	e067      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002338:	4b75      	ldr	r3, [pc, #468]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x354>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	2200      	movs	r2, #0
 8002340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002344:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002348:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800234c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002350:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002352:	2300      	movs	r3, #0
 8002354:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002356:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800235a:	4622      	mov	r2, r4
 800235c:	462b      	mov	r3, r5
 800235e:	f04f 0000 	mov.w	r0, #0
 8002362:	f04f 0100 	mov.w	r1, #0
 8002366:	0159      	lsls	r1, r3, #5
 8002368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800236c:	0150      	lsls	r0, r2, #5
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4621      	mov	r1, r4
 8002374:	1a51      	subs	r1, r2, r1
 8002376:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002378:	4629      	mov	r1, r5
 800237a:	eb63 0301 	sbc.w	r3, r3, r1
 800237e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800238c:	4649      	mov	r1, r9
 800238e:	018b      	lsls	r3, r1, #6
 8002390:	4641      	mov	r1, r8
 8002392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002396:	4641      	mov	r1, r8
 8002398:	018a      	lsls	r2, r1, #6
 800239a:	4641      	mov	r1, r8
 800239c:	ebb2 0a01 	subs.w	sl, r2, r1
 80023a0:	4649      	mov	r1, r9
 80023a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ba:	4692      	mov	sl, r2
 80023bc:	469b      	mov	fp, r3
 80023be:	4623      	mov	r3, r4
 80023c0:	eb1a 0303 	adds.w	r3, sl, r3
 80023c4:	623b      	str	r3, [r7, #32]
 80023c6:	462b      	mov	r3, r5
 80023c8:	eb4b 0303 	adc.w	r3, fp, r3
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023da:	4629      	mov	r1, r5
 80023dc:	028b      	lsls	r3, r1, #10
 80023de:	4621      	mov	r1, r4
 80023e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e4:	4621      	mov	r1, r4
 80023e6:	028a      	lsls	r2, r1, #10
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023f0:	2200      	movs	r2, #0
 80023f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80023f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80023f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80023fa:	f7fd ff03 	bl	8000204 <__aeabi_uldivmod>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4613      	mov	r3, r2
 8002404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002408:	4b41      	ldr	r3, [pc, #260]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x354>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800241a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800241e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800242a:	e0eb      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800242c:	4b38      	ldr	r3, [pc, #224]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x354>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002438:	4b35      	ldr	r3, [pc, #212]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x354>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d06b      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002444:	4b32      	ldr	r3, [pc, #200]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	2200      	movs	r2, #0
 800244c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800244e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002456:	663b      	str	r3, [r7, #96]	@ 0x60
 8002458:	2300      	movs	r3, #0
 800245a:	667b      	str	r3, [r7, #100]	@ 0x64
 800245c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002460:	4622      	mov	r2, r4
 8002462:	462b      	mov	r3, r5
 8002464:	f04f 0000 	mov.w	r0, #0
 8002468:	f04f 0100 	mov.w	r1, #0
 800246c:	0159      	lsls	r1, r3, #5
 800246e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002472:	0150      	lsls	r0, r2, #5
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4621      	mov	r1, r4
 800247a:	1a51      	subs	r1, r2, r1
 800247c:	61b9      	str	r1, [r7, #24]
 800247e:	4629      	mov	r1, r5
 8002480:	eb63 0301 	sbc.w	r3, r3, r1
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002492:	4659      	mov	r1, fp
 8002494:	018b      	lsls	r3, r1, #6
 8002496:	4651      	mov	r1, sl
 8002498:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800249c:	4651      	mov	r1, sl
 800249e:	018a      	lsls	r2, r1, #6
 80024a0:	4651      	mov	r1, sl
 80024a2:	ebb2 0801 	subs.w	r8, r2, r1
 80024a6:	4659      	mov	r1, fp
 80024a8:	eb63 0901 	sbc.w	r9, r3, r1
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024c0:	4690      	mov	r8, r2
 80024c2:	4699      	mov	r9, r3
 80024c4:	4623      	mov	r3, r4
 80024c6:	eb18 0303 	adds.w	r3, r8, r3
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	462b      	mov	r3, r5
 80024ce:	eb49 0303 	adc.w	r3, r9, r3
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024e0:	4629      	mov	r1, r5
 80024e2:	024b      	lsls	r3, r1, #9
 80024e4:	4621      	mov	r1, r4
 80024e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024ea:	4621      	mov	r1, r4
 80024ec:	024a      	lsls	r2, r1, #9
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f6:	2200      	movs	r2, #0
 80024f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80024fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002500:	f7fd fe80 	bl	8000204 <__aeabi_uldivmod>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4613      	mov	r3, r2
 800250a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800250e:	e065      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x420>
 8002510:	40023800 	.word	0x40023800
 8002514:	00f42400 	.word	0x00f42400
 8002518:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251c:	4b3d      	ldr	r3, [pc, #244]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x458>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	2200      	movs	r2, #0
 8002524:	4618      	mov	r0, r3
 8002526:	4611      	mov	r1, r2
 8002528:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800252c:	653b      	str	r3, [r7, #80]	@ 0x50
 800252e:	2300      	movs	r3, #0
 8002530:	657b      	str	r3, [r7, #84]	@ 0x54
 8002532:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002536:	4642      	mov	r2, r8
 8002538:	464b      	mov	r3, r9
 800253a:	f04f 0000 	mov.w	r0, #0
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	0159      	lsls	r1, r3, #5
 8002544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002548:	0150      	lsls	r0, r2, #5
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4641      	mov	r1, r8
 8002550:	1a51      	subs	r1, r2, r1
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	4649      	mov	r1, r9
 8002556:	eb63 0301 	sbc.w	r3, r3, r1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002568:	4659      	mov	r1, fp
 800256a:	018b      	lsls	r3, r1, #6
 800256c:	4651      	mov	r1, sl
 800256e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002572:	4651      	mov	r1, sl
 8002574:	018a      	lsls	r2, r1, #6
 8002576:	4651      	mov	r1, sl
 8002578:	1a54      	subs	r4, r2, r1
 800257a:	4659      	mov	r1, fp
 800257c:	eb63 0501 	sbc.w	r5, r3, r1
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	00eb      	lsls	r3, r5, #3
 800258a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800258e:	00e2      	lsls	r2, r4, #3
 8002590:	4614      	mov	r4, r2
 8002592:	461d      	mov	r5, r3
 8002594:	4643      	mov	r3, r8
 8002596:	18e3      	adds	r3, r4, r3
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	464b      	mov	r3, r9
 800259c:	eb45 0303 	adc.w	r3, r5, r3
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ae:	4629      	mov	r1, r5
 80025b0:	028b      	lsls	r3, r1, #10
 80025b2:	4621      	mov	r1, r4
 80025b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b8:	4621      	mov	r1, r4
 80025ba:	028a      	lsls	r2, r1, #10
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025c4:	2200      	movs	r2, #0
 80025c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025ce:	f7fd fe19 	bl	8000204 <__aeabi_uldivmod>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4613      	mov	r3, r2
 80025d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x458>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	0f1b      	lsrs	r3, r3, #28
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80025ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025fa:	e003      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x45c>)
 80025fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002602:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002604:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002608:	4618      	mov	r0, r3
 800260a:	37b8      	adds	r7, #184	@ 0xb8
 800260c:	46bd      	mov	sp, r7
 800260e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	00f42400 	.word	0x00f42400

0800261c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e28d      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8083 	beq.w	8002742 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800263c:	4b94      	ldr	r3, [pc, #592]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b04      	cmp	r3, #4
 8002646:	d019      	beq.n	800267c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002648:	4b91      	ldr	r3, [pc, #580]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002650:	2b08      	cmp	r3, #8
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002654:	4b8e      	ldr	r3, [pc, #568]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002660:	d00c      	beq.n	800267c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002662:	4b8b      	ldr	r3, [pc, #556]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d112      	bne.n	8002694 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266e:	4b88      	ldr	r3, [pc, #544]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002676:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800267a:	d10b      	bne.n	8002694 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267c:	4b84      	ldr	r3, [pc, #528]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d05b      	beq.n	8002740 <HAL_RCC_OscConfig+0x124>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d157      	bne.n	8002740 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e25a      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800269c:	d106      	bne.n	80026ac <HAL_RCC_OscConfig+0x90>
 800269e:	4b7c      	ldr	r3, [pc, #496]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a7b      	ldr	r2, [pc, #492]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e01d      	b.n	80026e8 <HAL_RCC_OscConfig+0xcc>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0xb4>
 80026b6:	4b76      	ldr	r3, [pc, #472]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a75      	ldr	r2, [pc, #468]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b73      	ldr	r3, [pc, #460]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a72      	ldr	r2, [pc, #456]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0xcc>
 80026d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fc2a 	bl	8000f48 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fc26 	bl	8000f48 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e21f      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b61      	ldr	r3, [pc, #388]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0xdc>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fc16 	bl	8000f48 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe fc12 	bl	8000f48 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	@ 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e20b      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	4b57      	ldr	r3, [pc, #348]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x104>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d06f      	beq.n	800282e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800274e:	4b50      	ldr	r3, [pc, #320]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b00      	cmp	r3, #0
 8002758:	d017      	beq.n	800278a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800275a:	4b4d      	ldr	r3, [pc, #308]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002762:	2b08      	cmp	r3, #8
 8002764:	d105      	bne.n	8002772 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002766:	4b4a      	ldr	r3, [pc, #296]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002772:	4b47      	ldr	r3, [pc, #284]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d11c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b44      	ldr	r3, [pc, #272]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	4b41      	ldr	r3, [pc, #260]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x186>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e1d3      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4937      	ldr	r1, [pc, #220]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	e03a      	b.n	800282e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b34      	ldr	r3, [pc, #208]	@ (8002894 <HAL_RCC_OscConfig+0x278>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe fbbf 	bl	8000f48 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fbbb 	bl	8000f48 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1b4      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b28      	ldr	r3, [pc, #160]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4925      	ldr	r1, [pc, #148]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002802:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <HAL_RCC_OscConfig+0x278>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fb9e 	bl	8000f48 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002810:	f7fe fb9a 	bl	8000f48 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e193      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d036      	beq.n	80028a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002842:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_RCC_OscConfig+0x27c>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fb7e 	bl	8000f48 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7fe fb7a 	bl	8000f48 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e173      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_RCC_OscConfig+0x274>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x234>
 800286e:	e01b      	b.n	80028a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_RCC_OscConfig+0x27c>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002876:	f7fe fb67 	bl	8000f48 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	e00e      	b.n	800289c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287e:	f7fe fb63 	bl	8000f48 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d907      	bls.n	800289c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e15c      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
 8002890:	40023800 	.word	0x40023800
 8002894:	42470000 	.word	0x42470000
 8002898:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b8a      	ldr	r3, [pc, #552]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ea      	bne.n	800287e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8097 	beq.w	80029e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b83      	ldr	r3, [pc, #524]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	4a7e      	ldr	r2, [pc, #504]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b79      	ldr	r3, [pc, #484]	@ (8002acc <HAL_RCC_OscConfig+0x4b0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	4b76      	ldr	r3, [pc, #472]	@ (8002acc <HAL_RCC_OscConfig+0x4b0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a75      	ldr	r2, [pc, #468]	@ (8002acc <HAL_RCC_OscConfig+0x4b0>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7fe fb23 	bl	8000f48 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe fb1f 	bl	8000f48 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e118      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b6c      	ldr	r3, [pc, #432]	@ (8002acc <HAL_RCC_OscConfig+0x4b0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x31e>
 800292c:	4b66      	ldr	r3, [pc, #408]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	4a65      	ldr	r2, [pc, #404]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	@ 0x70
 8002938:	e01c      	b.n	8002974 <HAL_RCC_OscConfig+0x358>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x340>
 8002942:	4b61      	ldr	r3, [pc, #388]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	4a60      	ldr	r2, [pc, #384]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	@ 0x70
 800294e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6713      	str	r3, [r2, #112]	@ 0x70
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0x358>
 800295c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a59      	ldr	r2, [pc, #356]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
 8002968:	4b57      	ldr	r3, [pc, #348]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a56      	ldr	r2, [pc, #344]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d015      	beq.n	80029a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fae4 	bl	8000f48 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe fae0 	bl	8000f48 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e0d7      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0ee      	beq.n	8002984 <HAL_RCC_OscConfig+0x368>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe face 	bl	8000f48 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe faca 	bl	8000f48 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0c1      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c6:	4b40      	ldr	r3, [pc, #256]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1ee      	bne.n	80029b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80ad 	beq.w	8002b48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ee:	4b36      	ldr	r3, [pc, #216]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d060      	beq.n	8002abc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d145      	bne.n	8002a8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b33      	ldr	r3, [pc, #204]	@ (8002ad0 <HAL_RCC_OscConfig+0x4b4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fa9e 	bl	8000f48 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fa9a 	bl	8000f48 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e093      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	4b29      	ldr	r3, [pc, #164]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	019b      	lsls	r3, r3, #6
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	3b01      	subs	r3, #1
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	061b      	lsls	r3, r3, #24
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	071b      	lsls	r3, r3, #28
 8002a5a:	491b      	ldr	r1, [pc, #108]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <HAL_RCC_OscConfig+0x4b4>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe fa6f 	bl	8000f48 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fa6b 	bl	8000f48 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e064      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a80:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x452>
 8002a8c:	e05c      	b.n	8002b48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <HAL_RCC_OscConfig+0x4b4>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fa58 	bl	8000f48 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fa54 	bl	8000f48 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e04d      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_RCC_OscConfig+0x4ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x480>
 8002aba:	e045      	b.n	8002b48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e040      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <HAL_RCC_OscConfig+0x538>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d030      	beq.n	8002b44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d129      	bne.n	8002b44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d122      	bne.n	8002b44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b04:	4013      	ands	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d119      	bne.n	8002b44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d10f      	bne.n	8002b44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e041      	b.n	8002bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe f854 	bl	8000c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 fad8 	bl	800314c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e041      	b.n	8002c8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f839 	bl	8002c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2202      	movs	r2, #2
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3304      	adds	r3, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f000 fa89 	bl	800314c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_TIM_PWM_Start+0x24>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e022      	b.n	8002d12 <HAL_TIM_PWM_Start+0x6a>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d109      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0x3e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	bf14      	ite	ne
 8002cde:	2301      	movne	r3, #1
 8002ce0:	2300      	moveq	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e015      	b.n	8002d12 <HAL_TIM_PWM_Start+0x6a>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d109      	bne.n	8002d00 <HAL_TIM_PWM_Start+0x58>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e008      	b.n	8002d12 <HAL_TIM_PWM_Start+0x6a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07c      	b.n	8002e14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_PWM_Start+0x82>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d28:	e013      	b.n	8002d52 <HAL_TIM_PWM_Start+0xaa>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_PWM_Start+0x92>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d38:	e00b      	b.n	8002d52 <HAL_TIM_PWM_Start+0xaa>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Start+0xa2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d48:	e003      	b.n	8002d52 <HAL_TIM_PWM_Start+0xaa>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	6839      	ldr	r1, [r7, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fcec 	bl	8003738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2d      	ldr	r2, [pc, #180]	@ (8002e1c <HAL_TIM_PWM_Start+0x174>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_TIM_PWM_Start+0xcc>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e20 <HAL_TIM_PWM_Start+0x178>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_TIM_PWM_Start+0xd0>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_TIM_PWM_Start+0xd2>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a22      	ldr	r2, [pc, #136]	@ (8002e1c <HAL_TIM_PWM_Start+0x174>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d022      	beq.n	8002dde <HAL_TIM_PWM_Start+0x136>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002da0:	d01d      	beq.n	8002dde <HAL_TIM_PWM_Start+0x136>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e24 <HAL_TIM_PWM_Start+0x17c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d018      	beq.n	8002dde <HAL_TIM_PWM_Start+0x136>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e28 <HAL_TIM_PWM_Start+0x180>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_TIM_PWM_Start+0x136>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1c      	ldr	r2, [pc, #112]	@ (8002e2c <HAL_TIM_PWM_Start+0x184>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00e      	beq.n	8002dde <HAL_TIM_PWM_Start+0x136>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a16      	ldr	r2, [pc, #88]	@ (8002e20 <HAL_TIM_PWM_Start+0x178>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d009      	beq.n	8002dde <HAL_TIM_PWM_Start+0x136>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a18      	ldr	r2, [pc, #96]	@ (8002e30 <HAL_TIM_PWM_Start+0x188>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_TIM_PWM_Start+0x136>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a16      	ldr	r2, [pc, #88]	@ (8002e34 <HAL_TIM_PWM_Start+0x18c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d111      	bne.n	8002e02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b06      	cmp	r3, #6
 8002dee:	d010      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	e007      	b.n	8002e12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	40010400 	.word	0x40010400
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800
 8002e2c:	40000c00 	.word	0x40000c00
 8002e30:	40014000 	.word	0x40014000
 8002e34:	40001800 	.word	0x40001800

08002e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e0ae      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b0c      	cmp	r3, #12
 8002e62:	f200 809f 	bhi.w	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e66:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08002fa5 	.word	0x08002fa5
 8002e74:	08002fa5 	.word	0x08002fa5
 8002e78:	08002fa5 	.word	0x08002fa5
 8002e7c:	08002ee1 	.word	0x08002ee1
 8002e80:	08002fa5 	.word	0x08002fa5
 8002e84:	08002fa5 	.word	0x08002fa5
 8002e88:	08002fa5 	.word	0x08002fa5
 8002e8c:	08002f23 	.word	0x08002f23
 8002e90:	08002fa5 	.word	0x08002fa5
 8002e94:	08002fa5 	.word	0x08002fa5
 8002e98:	08002fa5 	.word	0x08002fa5
 8002e9c:	08002f63 	.word	0x08002f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f9fc 	bl	80032a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0208 	orr.w	r2, r2, #8
 8002eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6999      	ldr	r1, [r3, #24]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	619a      	str	r2, [r3, #24]
      break;
 8002ede:	e064      	b.n	8002faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fa4c 	bl	8003384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6999      	ldr	r1, [r3, #24]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	021a      	lsls	r2, r3, #8
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	619a      	str	r2, [r3, #24]
      break;
 8002f20:	e043      	b.n	8002faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 faa1 	bl	8003470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0208 	orr.w	r2, r2, #8
 8002f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0204 	bic.w	r2, r2, #4
 8002f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69d9      	ldr	r1, [r3, #28]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	61da      	str	r2, [r3, #28]
      break;
 8002f60:	e023      	b.n	8002faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 faf5 	bl	8003558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	61da      	str	r2, [r3, #28]
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e0b4      	b.n	8003142 <HAL_TIM_ConfigClockSource+0x186>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003010:	d03e      	beq.n	8003090 <HAL_TIM_ConfigClockSource+0xd4>
 8003012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003016:	f200 8087 	bhi.w	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301e:	f000 8086 	beq.w	800312e <HAL_TIM_ConfigClockSource+0x172>
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003026:	d87f      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b70      	cmp	r3, #112	@ 0x70
 800302a:	d01a      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xa6>
 800302c:	2b70      	cmp	r3, #112	@ 0x70
 800302e:	d87b      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b60      	cmp	r3, #96	@ 0x60
 8003032:	d050      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003034:	2b60      	cmp	r3, #96	@ 0x60
 8003036:	d877      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b50      	cmp	r3, #80	@ 0x50
 800303a:	d03c      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0xfa>
 800303c:	2b50      	cmp	r3, #80	@ 0x50
 800303e:	d873      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b40      	cmp	r3, #64	@ 0x40
 8003042:	d058      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003044:	2b40      	cmp	r3, #64	@ 0x40
 8003046:	d86f      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b30      	cmp	r3, #48	@ 0x30
 800304a:	d064      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15a>
 800304c:	2b30      	cmp	r3, #48	@ 0x30
 800304e:	d86b      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b20      	cmp	r3, #32
 8003052:	d060      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15a>
 8003054:	2b20      	cmp	r3, #32
 8003056:	d867      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05c      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15a>
 800305c:	2b10      	cmp	r3, #16
 800305e:	d05a      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15a>
 8003060:	e062      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003072:	f000 fb41 	bl	80036f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	609a      	str	r2, [r3, #8]
      break;
 800308e:	e04f      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030a0:	f000 fb2a 	bl	80036f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030b2:	609a      	str	r2, [r3, #8]
      break;
 80030b4:	e03c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 fa9e 	bl	8003604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2150      	movs	r1, #80	@ 0x50
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 faf7 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e02c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 fabd 	bl	8003662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2160      	movs	r1, #96	@ 0x60
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fae7 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 80030f4:	e01c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003102:	461a      	mov	r2, r3
 8003104:	f000 fa7e 	bl	8003604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2140      	movs	r1, #64	@ 0x40
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fad7 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 8003114:	e00c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f000 face 	bl	80036c2 <TIM_ITRx_SetConfig>
      break;
 8003126:	e003      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e000      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800312e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a46      	ldr	r2, [pc, #280]	@ (8003278 <TIM_Base_SetConfig+0x12c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316a:	d00f      	beq.n	800318c <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a43      	ldr	r2, [pc, #268]	@ (800327c <TIM_Base_SetConfig+0x130>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00b      	beq.n	800318c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a42      	ldr	r2, [pc, #264]	@ (8003280 <TIM_Base_SetConfig+0x134>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d007      	beq.n	800318c <TIM_Base_SetConfig+0x40>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a41      	ldr	r2, [pc, #260]	@ (8003284 <TIM_Base_SetConfig+0x138>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_Base_SetConfig+0x40>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a40      	ldr	r2, [pc, #256]	@ (8003288 <TIM_Base_SetConfig+0x13c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d108      	bne.n	800319e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a35      	ldr	r2, [pc, #212]	@ (8003278 <TIM_Base_SetConfig+0x12c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d02b      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ac:	d027      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a32      	ldr	r2, [pc, #200]	@ (800327c <TIM_Base_SetConfig+0x130>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d023      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a31      	ldr	r2, [pc, #196]	@ (8003280 <TIM_Base_SetConfig+0x134>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01f      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a30      	ldr	r2, [pc, #192]	@ (8003284 <TIM_Base_SetConfig+0x138>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01b      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003288 <TIM_Base_SetConfig+0x13c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d017      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a2e      	ldr	r2, [pc, #184]	@ (800328c <TIM_Base_SetConfig+0x140>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003290 <TIM_Base_SetConfig+0x144>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00f      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003294 <TIM_Base_SetConfig+0x148>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003298 <TIM_Base_SetConfig+0x14c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a2a      	ldr	r2, [pc, #168]	@ (800329c <TIM_Base_SetConfig+0x150>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a29      	ldr	r2, [pc, #164]	@ (80032a0 <TIM_Base_SetConfig+0x154>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a10      	ldr	r2, [pc, #64]	@ (8003278 <TIM_Base_SetConfig+0x12c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_Base_SetConfig+0xf8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a12      	ldr	r2, [pc, #72]	@ (8003288 <TIM_Base_SetConfig+0x13c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d103      	bne.n	800324c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f023 0201 	bic.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]
  }
}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40010000 	.word	0x40010000
 800327c:	40000400 	.word	0x40000400
 8003280:	40000800 	.word	0x40000800
 8003284:	40000c00 	.word	0x40000c00
 8003288:	40010400 	.word	0x40010400
 800328c:	40014000 	.word	0x40014000
 8003290:	40014400 	.word	0x40014400
 8003294:	40014800 	.word	0x40014800
 8003298:	40001800 	.word	0x40001800
 800329c:	40001c00 	.word	0x40001c00
 80032a0:	40002000 	.word	0x40002000

080032a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f023 0201 	bic.w	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f023 0302 	bic.w	r3, r3, #2
 80032ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a20      	ldr	r2, [pc, #128]	@ (800337c <TIM_OC1_SetConfig+0xd8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_OC1_SetConfig+0x64>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a1f      	ldr	r2, [pc, #124]	@ (8003380 <TIM_OC1_SetConfig+0xdc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d10c      	bne.n	8003322 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0308 	bic.w	r3, r3, #8
 800330e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a15      	ldr	r2, [pc, #84]	@ (800337c <TIM_OC1_SetConfig+0xd8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_OC1_SetConfig+0x8e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a14      	ldr	r2, [pc, #80]	@ (8003380 <TIM_OC1_SetConfig+0xdc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d111      	bne.n	8003356 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	621a      	str	r2, [r3, #32]
}
 8003370:	bf00      	nop
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	40010000 	.word	0x40010000
 8003380:	40010400 	.word	0x40010400

08003384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f023 0210 	bic.w	r2, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0320 	bic.w	r3, r3, #32
 80033ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a22      	ldr	r2, [pc, #136]	@ (8003468 <TIM_OC2_SetConfig+0xe4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d003      	beq.n	80033ec <TIM_OC2_SetConfig+0x68>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a21      	ldr	r2, [pc, #132]	@ (800346c <TIM_OC2_SetConfig+0xe8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10d      	bne.n	8003408 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a17      	ldr	r2, [pc, #92]	@ (8003468 <TIM_OC2_SetConfig+0xe4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_OC2_SetConfig+0x94>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a16      	ldr	r2, [pc, #88]	@ (800346c <TIM_OC2_SetConfig+0xe8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d113      	bne.n	8003440 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800341e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40010000 	.word	0x40010000
 800346c:	40010400 	.word	0x40010400

08003470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a21      	ldr	r2, [pc, #132]	@ (8003550 <TIM_OC3_SetConfig+0xe0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_OC3_SetConfig+0x66>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a20      	ldr	r2, [pc, #128]	@ (8003554 <TIM_OC3_SetConfig+0xe4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d10d      	bne.n	80034f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <TIM_OC3_SetConfig+0xe0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d003      	beq.n	8003502 <TIM_OC3_SetConfig+0x92>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <TIM_OC3_SetConfig+0xe4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d113      	bne.n	800352a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	40010000 	.word	0x40010000
 8003554:	40010400 	.word	0x40010400

08003558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	031b      	lsls	r3, r3, #12
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <TIM_OC4_SetConfig+0xa4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_OC4_SetConfig+0x68>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a11      	ldr	r2, [pc, #68]	@ (8003600 <TIM_OC4_SetConfig+0xa8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d109      	bne.n	80035d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	621a      	str	r2, [r3, #32]
}
 80035ee:	bf00      	nop
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40010000 	.word	0x40010000
 8003600:	40010400 	.word	0x40010400

08003604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0201 	bic.w	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800362e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 030a 	bic.w	r3, r3, #10
 8003640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003662:	b480      	push	{r7}
 8003664:	b087      	sub	sp, #28
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f023 0210 	bic.w	r2, r3, #16
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800368c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	031b      	lsls	r3, r3, #12
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800369e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	f043 0307 	orr.w	r3, r3, #7
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	021a      	lsls	r2, r3, #8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	431a      	orrs	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4313      	orrs	r3, r2
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	2201      	movs	r2, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a1a      	ldr	r2, [r3, #32]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	43db      	mvns	r3, r3
 800375a:	401a      	ands	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	431a      	orrs	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003798:	2302      	movs	r3, #2
 800379a:	e05a      	b.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a21      	ldr	r2, [pc, #132]	@ (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e8:	d01d      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1a      	ldr	r2, [pc, #104]	@ (800386c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a18      	ldr	r2, [pc, #96]	@ (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a17      	ldr	r2, [pc, #92]	@ (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10c      	bne.n	8003840 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800382c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40010000 	.word	0x40010000
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40010400 	.word	0x40010400
 8003874:	40014000 	.word	0x40014000
 8003878:	40001800 	.word	0x40001800

0800387c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e042      	b.n	8003914 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fa1a 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	@ 0x24
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fc85 	bl	80041d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b0ba      	sub	sp, #232	@ 0xe8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800395a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10f      	bne.n	8003982 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_UART_IRQHandler+0x66>
 800396e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fb69 	bl	8004052 <UART_Receive_IT>
      return;
 8003980:	e25b      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80de 	beq.w	8003b48 <HAL_UART_IRQHandler+0x22c>
 800398c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800399c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80d1 	beq.w	8003b48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0xae>
 80039b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_UART_IRQHandler+0xd2>
 80039d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f043 0202 	orr.w	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_UART_IRQHandler+0xf6>
 80039fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d011      	beq.n	8003a42 <HAL_UART_IRQHandler+0x126>
 8003a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d105      	bne.n	8003a36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f043 0208 	orr.w	r2, r3, #8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 81f2 	beq.w	8003e30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_UART_IRQHandler+0x14e>
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 faf4 	bl	8004052 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a74:	2b40      	cmp	r3, #64	@ 0x40
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d103      	bne.n	8003a96 <HAL_UART_IRQHandler+0x17a>
 8003a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d04f      	beq.n	8003b36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f9fc 	bl	8003e94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa6:	2b40      	cmp	r3, #64	@ 0x40
 8003aa8:	d141      	bne.n	8003b2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3314      	adds	r3, #20
 8003ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1d9      	bne.n	8003aaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d013      	beq.n	8003b26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b02:	4a7e      	ldr	r2, [pc, #504]	@ (8003cfc <HAL_UART_IRQHandler+0x3e0>)
 8003b04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe f835 	bl	8001b7a <HAL_DMA_Abort_IT>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b20:	4610      	mov	r0, r2
 8003b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e00e      	b.n	8003b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f99e 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	e00a      	b.n	8003b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f99a 	bl	8003e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e006      	b.n	8003b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f996 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b42:	e175      	b.n	8003e30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	bf00      	nop
    return;
 8003b46:	e173      	b.n	8003e30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	f040 814f 	bne.w	8003df0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8148 	beq.w	8003df0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8141 	beq.w	8003df0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	f040 80b6 	bne.w	8003d00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ba0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8145 	beq.w	8003e34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	f080 813e 	bcs.w	8003e34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bca:	f000 8088 	beq.w	8003cde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003bfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1d9      	bne.n	8003bce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e1      	bne.n	8003c1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e3      	bne.n	8003c56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e3      	bne.n	8003c9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fd fede 	bl	8001a9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8c1 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cfa:	e09b      	b.n	8003e34 <HAL_UART_IRQHandler+0x518>
 8003cfc:	08003f5b 	.word	0x08003f5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 808e 	beq.w	8003e38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8089 	beq.w	8003e38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e3      	bne.n	8003d26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3314      	adds	r3, #20
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d82:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e3      	bne.n	8003d5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0310 	bic.w	r3, r3, #16
 8003dba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003dc8:	61fa      	str	r2, [r7, #28]
 8003dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	69b9      	ldr	r1, [r7, #24]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e3      	bne.n	8003da4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003de2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f847 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dee:	e023      	b.n	8003e38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d009      	beq.n	8003e10 <HAL_UART_IRQHandler+0x4f4>
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f8ba 	bl	8003f82 <UART_Transmit_IT>
    return;
 8003e0e:	e014      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <HAL_UART_IRQHandler+0x51e>
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f8fa 	bl	8004022 <UART_EndTransmit_IT>
    return;
 8003e2e:	e004      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e30:	bf00      	nop
 8003e32:	e002      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e34:	bf00      	nop
 8003e36:	e000      	b.n	8003e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e38:	bf00      	nop
  }
}
 8003e3a:	37e8      	adds	r7, #232	@ 0xe8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b095      	sub	sp, #84	@ 0x54
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ebc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ec2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3314      	adds	r3, #20
 8003eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d119      	bne.n	8003f40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f023 0310 	bic.w	r3, r3, #16
 8003f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f2c:	61ba      	str	r2, [r7, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6979      	ldr	r1, [r7, #20]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f4e:	bf00      	nop
 8003f50:	3754      	adds	r7, #84	@ 0x54
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff ff77 	bl	8003e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b21      	cmp	r3, #33	@ 0x21
 8003f94:	d13e      	bne.n	8004014 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9e:	d114      	bne.n	8003fca <UART_Transmit_IT+0x48>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d110      	bne.n	8003fca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	1c9a      	adds	r2, r3, #2
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	621a      	str	r2, [r3, #32]
 8003fc8:	e008      	b.n	8003fdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	1c59      	adds	r1, r3, #1
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6211      	str	r1, [r2, #32]
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10f      	bne.n	8004010 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ffe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800400e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004038:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fefc 	bl	8003e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b08c      	sub	sp, #48	@ 0x30
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b22      	cmp	r3, #34	@ 0x22
 8004064:	f040 80ae 	bne.w	80041c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004070:	d117      	bne.n	80040a2 <UART_Receive_IT+0x50>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d113      	bne.n	80040a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	b29a      	uxth	r2, r3
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	1c9a      	adds	r2, r3, #2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	@ 0x28
 80040a0:	e026      	b.n	80040f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b4:	d007      	beq.n	80040c6 <UART_Receive_IT+0x74>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <UART_Receive_IT+0x82>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e008      	b.n	80040e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4619      	mov	r1, r3
 80040fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004100:	2b00      	cmp	r3, #0
 8004102:	d15d      	bne.n	80041c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0220 	bic.w	r2, r2, #32
 8004112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	2b01      	cmp	r3, #1
 8004148:	d135      	bne.n	80041b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	613b      	str	r3, [r7, #16]
   return(result);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f023 0310 	bic.w	r3, r3, #16
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004170:	623a      	str	r2, [r7, #32]
 8004172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	69f9      	ldr	r1, [r7, #28]
 8004176:	6a3a      	ldr	r2, [r7, #32]
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	61bb      	str	r3, [r7, #24]
   return(result);
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e5      	bne.n	8004150 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b10      	cmp	r3, #16
 8004190:	d10a      	bne.n	80041a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff fe64 	bl	8003e7c <HAL_UARTEx_RxEventCallback>
 80041b4:	e002      	b.n	80041bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fe4c 	bl	8003e54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	e002      	b.n	80041c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e000      	b.n	80041c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3730      	adds	r7, #48	@ 0x30
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d4:	b0c0      	sub	sp, #256	@ 0x100
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	ea40 0301 	orr.w	r3, r0, r1
 80041f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	431a      	orrs	r2, r3
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	431a      	orrs	r2, r3
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004228:	f021 010c 	bic.w	r1, r1, #12
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004236:	430b      	orrs	r3, r1
 8004238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424a:	6999      	ldr	r1, [r3, #24]
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	ea40 0301 	orr.w	r3, r0, r1
 8004256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b8f      	ldr	r3, [pc, #572]	@ (800449c <UART_SetConfig+0x2cc>)
 8004260:	429a      	cmp	r2, r3
 8004262:	d005      	beq.n	8004270 <UART_SetConfig+0xa0>
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b8d      	ldr	r3, [pc, #564]	@ (80044a0 <UART_SetConfig+0x2d0>)
 800426c:	429a      	cmp	r2, r3
 800426e:	d104      	bne.n	800427a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004270:	f7fd ff90 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 8004274:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004278:	e003      	b.n	8004282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800427a:	f7fd ff77 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 800427e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800428c:	f040 810c 	bne.w	80044a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004294:	2200      	movs	r2, #0
 8004296:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800429a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800429e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	1891      	adds	r1, r2, r2
 80042a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042aa:	415b      	adcs	r3, r3
 80042ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042b2:	4621      	mov	r1, r4
 80042b4:	eb12 0801 	adds.w	r8, r2, r1
 80042b8:	4629      	mov	r1, r5
 80042ba:	eb43 0901 	adc.w	r9, r3, r1
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042d2:	4690      	mov	r8, r2
 80042d4:	4699      	mov	r9, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	eb18 0303 	adds.w	r3, r8, r3
 80042dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042e0:	462b      	mov	r3, r5
 80042e2:	eb49 0303 	adc.w	r3, r9, r3
 80042e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042fe:	460b      	mov	r3, r1
 8004300:	18db      	adds	r3, r3, r3
 8004302:	653b      	str	r3, [r7, #80]	@ 0x50
 8004304:	4613      	mov	r3, r2
 8004306:	eb42 0303 	adc.w	r3, r2, r3
 800430a:	657b      	str	r3, [r7, #84]	@ 0x54
 800430c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004314:	f7fb ff76 	bl	8000204 <__aeabi_uldivmod>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4b61      	ldr	r3, [pc, #388]	@ (80044a4 <UART_SetConfig+0x2d4>)
 800431e:	fba3 2302 	umull	r2, r3, r3, r2
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	011c      	lsls	r4, r3, #4
 8004326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800432a:	2200      	movs	r2, #0
 800432c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004330:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	1891      	adds	r1, r2, r2
 800433e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004340:	415b      	adcs	r3, r3
 8004342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004348:	4641      	mov	r1, r8
 800434a:	eb12 0a01 	adds.w	sl, r2, r1
 800434e:	4649      	mov	r1, r9
 8004350:	eb43 0b01 	adc.w	fp, r3, r1
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004368:	4692      	mov	sl, r2
 800436a:	469b      	mov	fp, r3
 800436c:	4643      	mov	r3, r8
 800436e:	eb1a 0303 	adds.w	r3, sl, r3
 8004372:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004376:	464b      	mov	r3, r9
 8004378:	eb4b 0303 	adc.w	r3, fp, r3
 800437c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800438c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004394:	460b      	mov	r3, r1
 8004396:	18db      	adds	r3, r3, r3
 8004398:	643b      	str	r3, [r7, #64]	@ 0x40
 800439a:	4613      	mov	r3, r2
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043aa:	f7fb ff2b 	bl	8000204 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	4b3b      	ldr	r3, [pc, #236]	@ (80044a4 <UART_SetConfig+0x2d4>)
 80043b6:	fba3 2301 	umull	r2, r3, r3, r1
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2264      	movs	r2, #100	@ 0x64
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	1acb      	subs	r3, r1, r3
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043ca:	4b36      	ldr	r3, [pc, #216]	@ (80044a4 <UART_SetConfig+0x2d4>)
 80043cc:	fba3 2302 	umull	r2, r3, r3, r2
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043d8:	441c      	add	r4, r3
 80043da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043ec:	4642      	mov	r2, r8
 80043ee:	464b      	mov	r3, r9
 80043f0:	1891      	adds	r1, r2, r2
 80043f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043f4:	415b      	adcs	r3, r3
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043fc:	4641      	mov	r1, r8
 80043fe:	1851      	adds	r1, r2, r1
 8004400:	6339      	str	r1, [r7, #48]	@ 0x30
 8004402:	4649      	mov	r1, r9
 8004404:	414b      	adcs	r3, r1
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004414:	4659      	mov	r1, fp
 8004416:	00cb      	lsls	r3, r1, #3
 8004418:	4651      	mov	r1, sl
 800441a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800441e:	4651      	mov	r1, sl
 8004420:	00ca      	lsls	r2, r1, #3
 8004422:	4610      	mov	r0, r2
 8004424:	4619      	mov	r1, r3
 8004426:	4603      	mov	r3, r0
 8004428:	4642      	mov	r2, r8
 800442a:	189b      	adds	r3, r3, r2
 800442c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004430:	464b      	mov	r3, r9
 8004432:	460a      	mov	r2, r1
 8004434:	eb42 0303 	adc.w	r3, r2, r3
 8004438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004448:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800444c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004450:	460b      	mov	r3, r1
 8004452:	18db      	adds	r3, r3, r3
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004456:	4613      	mov	r3, r2
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800445e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004466:	f7fb fecd 	bl	8000204 <__aeabi_uldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <UART_SetConfig+0x2d4>)
 8004470:	fba3 1302 	umull	r1, r3, r3, r2
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	2164      	movs	r1, #100	@ 0x64
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	3332      	adds	r3, #50	@ 0x32
 8004482:	4a08      	ldr	r2, [pc, #32]	@ (80044a4 <UART_SetConfig+0x2d4>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	f003 0207 	and.w	r2, r3, #7
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4422      	add	r2, r4
 8004496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004498:	e106      	b.n	80046a8 <UART_SetConfig+0x4d8>
 800449a:	bf00      	nop
 800449c:	40011000 	.word	0x40011000
 80044a0:	40011400 	.word	0x40011400
 80044a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044ba:	4642      	mov	r2, r8
 80044bc:	464b      	mov	r3, r9
 80044be:	1891      	adds	r1, r2, r2
 80044c0:	6239      	str	r1, [r7, #32]
 80044c2:	415b      	adcs	r3, r3
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ca:	4641      	mov	r1, r8
 80044cc:	1854      	adds	r4, r2, r1
 80044ce:	4649      	mov	r1, r9
 80044d0:	eb43 0501 	adc.w	r5, r3, r1
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	00eb      	lsls	r3, r5, #3
 80044de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044e2:	00e2      	lsls	r2, r4, #3
 80044e4:	4614      	mov	r4, r2
 80044e6:	461d      	mov	r5, r3
 80044e8:	4643      	mov	r3, r8
 80044ea:	18e3      	adds	r3, r4, r3
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044f0:	464b      	mov	r3, r9
 80044f2:	eb45 0303 	adc.w	r3, r5, r3
 80044f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004506:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004516:	4629      	mov	r1, r5
 8004518:	008b      	lsls	r3, r1, #2
 800451a:	4621      	mov	r1, r4
 800451c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004520:	4621      	mov	r1, r4
 8004522:	008a      	lsls	r2, r1, #2
 8004524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004528:	f7fb fe6c 	bl	8000204 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4b60      	ldr	r3, [pc, #384]	@ (80046b4 <UART_SetConfig+0x4e4>)
 8004532:	fba3 2302 	umull	r2, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	011c      	lsls	r4, r3, #4
 800453a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004544:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800454c:	4642      	mov	r2, r8
 800454e:	464b      	mov	r3, r9
 8004550:	1891      	adds	r1, r2, r2
 8004552:	61b9      	str	r1, [r7, #24]
 8004554:	415b      	adcs	r3, r3
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800455c:	4641      	mov	r1, r8
 800455e:	1851      	adds	r1, r2, r1
 8004560:	6139      	str	r1, [r7, #16]
 8004562:	4649      	mov	r1, r9
 8004564:	414b      	adcs	r3, r1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004574:	4659      	mov	r1, fp
 8004576:	00cb      	lsls	r3, r1, #3
 8004578:	4651      	mov	r1, sl
 800457a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800457e:	4651      	mov	r1, sl
 8004580:	00ca      	lsls	r2, r1, #3
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	4603      	mov	r3, r0
 8004588:	4642      	mov	r2, r8
 800458a:	189b      	adds	r3, r3, r2
 800458c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004590:	464b      	mov	r3, r9
 8004592:	460a      	mov	r2, r1
 8004594:	eb42 0303 	adc.w	r3, r2, r3
 8004598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045b4:	4649      	mov	r1, r9
 80045b6:	008b      	lsls	r3, r1, #2
 80045b8:	4641      	mov	r1, r8
 80045ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045be:	4641      	mov	r1, r8
 80045c0:	008a      	lsls	r2, r1, #2
 80045c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045c6:	f7fb fe1d 	bl	8000204 <__aeabi_uldivmod>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	4b38      	ldr	r3, [pc, #224]	@ (80046b4 <UART_SetConfig+0x4e4>)
 80045d2:	fba3 2301 	umull	r2, r3, r3, r1
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	2264      	movs	r2, #100	@ 0x64
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	1acb      	subs	r3, r1, r3
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	3332      	adds	r3, #50	@ 0x32
 80045e4:	4a33      	ldr	r2, [pc, #204]	@ (80046b4 <UART_SetConfig+0x4e4>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045f0:	441c      	add	r4, r3
 80045f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f6:	2200      	movs	r2, #0
 80045f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80045fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80045fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	1891      	adds	r1, r2, r2
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	415b      	adcs	r3, r3
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004610:	4641      	mov	r1, r8
 8004612:	1851      	adds	r1, r2, r1
 8004614:	6039      	str	r1, [r7, #0]
 8004616:	4649      	mov	r1, r9
 8004618:	414b      	adcs	r3, r1
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004628:	4659      	mov	r1, fp
 800462a:	00cb      	lsls	r3, r1, #3
 800462c:	4651      	mov	r1, sl
 800462e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004632:	4651      	mov	r1, sl
 8004634:	00ca      	lsls	r2, r1, #3
 8004636:	4610      	mov	r0, r2
 8004638:	4619      	mov	r1, r3
 800463a:	4603      	mov	r3, r0
 800463c:	4642      	mov	r2, r8
 800463e:	189b      	adds	r3, r3, r2
 8004640:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004642:	464b      	mov	r3, r9
 8004644:	460a      	mov	r2, r1
 8004646:	eb42 0303 	adc.w	r3, r2, r3
 800464a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	663b      	str	r3, [r7, #96]	@ 0x60
 8004656:	667a      	str	r2, [r7, #100]	@ 0x64
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004664:	4649      	mov	r1, r9
 8004666:	008b      	lsls	r3, r1, #2
 8004668:	4641      	mov	r1, r8
 800466a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800466e:	4641      	mov	r1, r8
 8004670:	008a      	lsls	r2, r1, #2
 8004672:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004676:	f7fb fdc5 	bl	8000204 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4b0d      	ldr	r3, [pc, #52]	@ (80046b4 <UART_SetConfig+0x4e4>)
 8004680:	fba3 1302 	umull	r1, r3, r3, r2
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	2164      	movs	r1, #100	@ 0x64
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	3332      	adds	r3, #50	@ 0x32
 8004692:	4a08      	ldr	r2, [pc, #32]	@ (80046b4 <UART_SetConfig+0x4e4>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	f003 020f 	and.w	r2, r3, #15
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4422      	add	r2, r4
 80046a6:	609a      	str	r2, [r3, #8]
}
 80046a8:	bf00      	nop
 80046aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046ae:	46bd      	mov	sp, r7
 80046b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b4:	51eb851f 	.word	0x51eb851f

080046b8 <memset>:
 80046b8:	4402      	add	r2, r0
 80046ba:	4603      	mov	r3, r0
 80046bc:	4293      	cmp	r3, r2
 80046be:	d100      	bne.n	80046c2 <memset+0xa>
 80046c0:	4770      	bx	lr
 80046c2:	f803 1b01 	strb.w	r1, [r3], #1
 80046c6:	e7f9      	b.n	80046bc <memset+0x4>

080046c8 <__libc_init_array>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004700 <__libc_init_array+0x38>)
 80046cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004704 <__libc_init_array+0x3c>)
 80046ce:	1b64      	subs	r4, r4, r5
 80046d0:	10a4      	asrs	r4, r4, #2
 80046d2:	2600      	movs	r6, #0
 80046d4:	42a6      	cmp	r6, r4
 80046d6:	d109      	bne.n	80046ec <__libc_init_array+0x24>
 80046d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004708 <__libc_init_array+0x40>)
 80046da:	4c0c      	ldr	r4, [pc, #48]	@ (800470c <__libc_init_array+0x44>)
 80046dc:	f000 f818 	bl	8004710 <_init>
 80046e0:	1b64      	subs	r4, r4, r5
 80046e2:	10a4      	asrs	r4, r4, #2
 80046e4:	2600      	movs	r6, #0
 80046e6:	42a6      	cmp	r6, r4
 80046e8:	d105      	bne.n	80046f6 <__libc_init_array+0x2e>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f0:	4798      	blx	r3
 80046f2:	3601      	adds	r6, #1
 80046f4:	e7ee      	b.n	80046d4 <__libc_init_array+0xc>
 80046f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fa:	4798      	blx	r3
 80046fc:	3601      	adds	r6, #1
 80046fe:	e7f2      	b.n	80046e6 <__libc_init_array+0x1e>
 8004700:	08004748 	.word	0x08004748
 8004704:	08004748 	.word	0x08004748
 8004708:	08004748 	.word	0x08004748
 800470c:	0800474c 	.word	0x0800474c

08004710 <_init>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	bf00      	nop
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr

0800471c <_fini>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	bf00      	nop
 8004720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004722:	bc08      	pop	{r3}
 8004724:	469e      	mov	lr, r3
 8004726:	4770      	bx	lr
